using LazurdIT.FluentOrm.Common;
using System;
using System.Collections.Generic;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;

namespace LazurdIT.FluentOrm.MySql
{
    public abstract class FieldsSelectionManager<T> : IFieldsSelectionManager<T> where T : IFluentModel, new()
    {
        public FluentTypeDictionary FieldsList { get; protected set; }
        public FluentTypeDictionary OriginalFieldsList { get; protected set; }
        public FluentTypeDictionary IdentityFieldsList { get; protected set; }
        public FluentTypeDictionary PKFieldsList { get; protected set; }

        protected FieldsSelectionManager()
        {
            FieldsList = new(TypeCache.GetTypeCache<T>());
            OriginalFieldsList = new(TypeCache.GetTypeCache<T>());
            IdentityFieldsList = new(TypeCache.GetTypeCache<T>().Where(i => i.Value?.Attribute?.AutoGenerated == true));
            PKFieldsList = new(TypeCache.GetTypeCache<T>().Where(i => i.Value?.Attribute?.IsPrimary == true));
        }

        public abstract IFieldsSelectionManager<T> Exclude<TProperty>(Expression<Func<T, TProperty>> targetProperty);

        public abstract IFieldsSelectionManager<T> ExcludeAll();

        public abstract IEnumerable<DbParameter> GetSqlParameters(T instance, string parameterName);

        public abstract IFieldsSelectionManager<T> Include<TProperty>(Expression<Func<T, TProperty>> targetProperty);

        public abstract IFieldsSelectionManager<T> IncludeAll();
    }
}