using MySqlConnector;
using NpgsqlTypes;
using Oracle.ManagedDataAccess.Client;
using System;
using System.Data;
using System.IO;

namespace LazurdIT.FluentOrm.Common
{
    [AttributeUsage(AttributeTargets.Property, Inherited = false, AllowMultiple = false)]
    public class FluentFieldAttribute : Attribute
    {
        private readonly string? name;
        private readonly bool autoGenerated;
        private readonly bool isPrimary;
        private readonly bool allowNull;
        private readonly OracleDbType? attributeOracleDbType;
        private readonly SqlDbType? attributeSqlDbType;
        private readonly NpgsqlDbType? attributeNpgsqlDbType;
        private readonly MySqlDbType? attributeMySqlDbType;

        public FluentFieldAttribute(string? name = null, bool autoGenerated = false, bool isPrimary = false, bool allowNull = true, int oracleDbType = 0, int sqlDbType = 0, int npgsqlDbType = 0, int mySqlDbType = 0
            )
        {
            this.name = name;
            this.autoGenerated = autoGenerated;
            this.isPrimary = isPrimary;
            this.allowNull = allowNull;
            attributeOracleDbType = oracleDbType == 0 ? null : Enum.IsDefined(typeof(OracleDbType), oracleDbType) ? (OracleDbType)oracleDbType : throw new InvalidDataException("Invalid Oracle DB Type passed");
            attributeSqlDbType = sqlDbType == 0 ? null : Enum.IsDefined(typeof(SqlDbType), sqlDbType) ? (SqlDbType)sqlDbType : throw new InvalidDataException("Invalid MsSql DB Type passed");
            attributeNpgsqlDbType = npgsqlDbType == 0 ? null : Enum.IsDefined(typeof(NpgsqlDbType), npgsqlDbType) ? (NpgsqlDbType)npgsqlDbType : throw new InvalidDataException("Invalid Npgsql DB Type passed");
            attributeMySqlDbType = mySqlDbType == 0 ? null : Enum.IsDefined(typeof(MySqlDbType), mySqlDbType) ? (MySqlDbType)mySqlDbType : throw new InvalidDataException("Invalid MySql DB Type passed");
        }

        public OracleDbType? AttributeOracleDbType => attributeOracleDbType;
        public SqlDbType? AttributeSqlDbType => attributeSqlDbType;
        public NpgsqlDbType? AttributeNpgsqlDbType => attributeNpgsqlDbType;
        public MySqlDbType? AttributeMySqlDbType => attributeMySqlDbType;
        public string? Name => name;
        public bool AutoGenerated => autoGenerated;
        public bool IsPrimary => isPrimary;
        public bool AllowNull => allowNull;
    }
}